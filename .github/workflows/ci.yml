name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Type checking and linting
  validate:
    name: 'Validate Code Quality'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript type checking
      run: npm run typecheck
      
    - name: Run ESLint
      run: npm run lint
      continue-on-error: true # Allow warnings but not errors
      
    - name: Check code formatting
      run: npm run format:check
      continue-on-error: true

  # Build and test
  build:
    name: 'Build & Test'
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test
      env:
        CI: true
      
    - name: Build library
      run: npm run build:lib
      
    - name: Build Storybook
      run: npm run build:storybook
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: |
          dist/
          storybook-static/
        retention-days: 7

  # Deploy Storybook to GitHub Pages (if on main branch)
  deploy-storybook:
    name: 'Deploy Storybook'
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: storybook-static/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Quality gates and reporting
  quality-gate:
    name: 'Quality Gate'
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run comprehensive validation
      run: npm run validate-build
      continue-on-error: true
      
    - name: Upload validation report
      uses: actions/upload-artifact@v4
      with:
        name: build-report
        path: build-report.json
      if: always()
      
    - name: Comment PR with validation results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('build-report.json')) {
            const report = JSON.parse(fs.readFileSync('build-report.json', 'utf8'));
            const summary = `
          ## 🔍 Build Validation Report
          
          **Status:** ${report.summary.typecheck && report.summary.build ? '✅ Passed' : '❌ Failed'}
          
          - **TypeScript:** ${report.summary.typecheck ? '✅' : '❌'}
          - **Build:** ${report.summary.build ? '✅' : '❌'}  
          - **Lint:** ${report.summary.lint ? '✅' : '❌'}
          
          ${report.recommendations.length > 0 ? 
            '### 🔧 Recommendations:\n' + report.recommendations.map(r => `- ${r}`).join('\n') 
            : '### ✨ All checks passed!'}
          
          ---
          *Generated at ${report.timestamp}*
          `;
          
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }